import os
import json
import psutil
import asyncio
import speedtest
import subprocess
from datetime import datetime
from telegram import Update, User
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram.ext import CommandHandler, CallbackContext, Application

# Bi·∫øn to√†n c·ª•c
last_sms_time = {}
last_spam_time = {}
sms_process = None
spam_process = None

# ID admin ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng l·ªánh /add (kh√¥ng c√≤n d√πng n·ªØa)
ADMIN_ID = 7605936504
GROUP_ID = -1002408191237

# H√†m ki·ªÉm tra server
def check_server():
    try:
        ping = psutil.net_if_stats()
        return ping['lo'].isup  # Thay 'lo' b·∫±ng interface ph√π h·ª£p n·∫øu VPS kh√°c
    except:
        return False

# H√†m x·ª≠ l√Ω l·ªánh spam (ai c≈©ng d√πng ƒë∆∞·ª£c)
async def spam(update: Update, context: CallbackContext):
    global last_spam_time, spam_process

    user_id = update.effective_user.id
    now = datetime.now()

    # Ki·ªÉm tra cooldown 60s
    if user_id in last_spam_time and (now - last_spam_time[user_id]).total_seconds() < 60:
        await update.message.reply_text("‚ùå B·∫°n c·∫ßn ch·ªù 60 gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh n√†y l·∫°i.")
        return

    # Ki·ªÉm tra tham s·ªë
    args = context.args
    if len(args) != 2 or not args[0].isdigit() or not args[1].isdigit():
        await update.message.reply_text("‚ùå S·ª≠ d·ª•ng ƒë√∫ng c√°ch: /spam [10 s·ªë] [v√≤ng l·∫∑p].")
        return

    phone, loops = args
    if len(phone) != 10 ho·∫∑c not phone.startswith("0"):
        await update.message.reply_text("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† c√≥ ƒë·ªß 10 ch·ªØ s·ªë.")
        return

    loops = int(loops)
    if loops > 10000:
        await update.message.reply_text("‚ùå V√≤ng l·∫∑p kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10.000.")
        return

    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng l·ªánh
    last_spam_time[user_id] = now

    # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
    await update.message.reply_text(
        f"**Spam Server 1**\nüì± **M·ª•c ti√™u:** {phone}\nüçÉ **V√≤ng l·∫∑p:** {loops}",
        parse_mode="Markdown"
    )

    # D·ª´ng ti·∫øn tr√¨nh c≈© n·∫øu c√≥
    if spam_process and spam_process.poll() is None:
        spam_process.terminate()
        print("Ti·∫øn tr√¨nh spam c≈© ƒë√£ b·ªã d·ª´ng.")

    # Ch·∫°y ti·∫øn tr√¨nh m·ªõi
    spam_process = subprocess.Popen(["python3", "smsvip.py", phone, "200"])

    # D·ª´ng ti·∫øn tr√¨nh sau 200 gi√¢y
    async def stop_spam_after_delay():
        global spam_process
        await asyncio.sleep(200)
        if spam_process and spam_process.poll() is None:
            spam_process.terminate()
            spam_process = None
            print("Spam process stopped after 200 seconds.")

    asyncio.create_task(stop_spam_after_delay())

# H√†m x·ª≠ l√Ω l·ªánh SMS (ai c≈©ng d√πng ƒë∆∞·ª£c)
async def sms(update: Update, context: CallbackContext):
    global last_sms_time, sms_process

    user_id = update.effective_user.id
    now = datetime.now()

    # Ki·ªÉm tra cooldown 100s
    if user_id in last_sms_time and (now - last_sms_time[user_id]).total_seconds() < 100:
        await update.message.reply_text("‚ùå B·∫°n c·∫ßn ch·ªù th√™m ƒë·ªÉ s·ª≠ d·ª•ng l·∫°i l·ªánh.")
        return

    # Ki·ªÉm tra tham s·ªë
    args = context.args
    if len(args) != 2 or not args[0].isdigit() or not args[1].isdigit():
        await update.message.reply_text("‚ùå S·ª≠ d·ª•ng ƒë√∫ng c√°ch: /sms [s·ªë ƒëi·ªán tho·∫°i] [v√≤ng l·∫∑p].")
        return

    phone, loops = args
    if len(phone) != 10 ho·∫∑c not phone.startswith("0"):
        await update.message.reply_text("‚ùå S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† c√≥ ƒë·ªß 10 ch·ªØ s·ªë.")
        return

    loops = int(loops)
    if loops > 10000:
        await update.message.reply_text("‚ùå V√≤ng l·∫∑p kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10.000.")
        return

    # C·∫≠p nh·∫≠t th·ªùi gian s·ª≠ d·ª•ng l·ªánh
    last_sms_time[user_id] = now

    # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu
    await update.message.reply_text(
        f"‚ö°*B·∫Øt ƒë·∫ßu t·∫•n c√¥ng SEVER1*\n"
        f"üì±*S·ªë ƒëi·ªán tho·∫°i:* {phone}\n"
        f"üå©Ô∏è*V√≤ng l·∫∑p:* {loops}",
        parse_mode="Markdown"
    )

    # D·ª´ng ti·∫øn tr√¨nh c≈© n·∫øu c√≥
    if sms_process and sms_process.poll() is None:
        sms_process.terminate()
        print("Ti·∫øn tr√¨nh SMS c≈© ƒë√£ b·ªã d·ª´ng.")

    # Ch·∫°y ti·∫øn tr√¨nh m·ªõi
    sms_process = subprocess.Popen(["python3", "sms.py", phone, "100"])

    # D·ª´ng ti·∫øn tr√¨nh sau 120 gi√¢y
    async def stop_sms_after_delay():
        global sms_process
        await asyncio.sleep(120)
        if sms_process and sms_process.poll() is None:
            sms_process.terminate()
            sms_process = None
            print("SMS process stopped after 120 seconds.")

    asyncio.create_task(stop_sms_after_delay())

# H√†m x·ª≠ l√Ω l·ªánh ki·ªÉm tra server
async def server(update: Update, context: CallbackContext):
    cpu_percent = psutil.cpu_percent(interval=1)
    memory = psutil.virtual_memory()
    memory_used = memory.percent
    disk_usage = psutil.disk_usage('/')
    disk_used = disk_usage.percent
    disk_free = 100 - disk_used

    try:
        st = speedtest.Speedtest()
        download_speed = st.download() / 1e+6  # Mbps
        upload_speed = st.upload() / 1e+6  # Mbps
    except:
        download_speed = upload_speed = 0

    server_status = "üü¢" if check_server() else "üî¥"

    await update.message.reply_text(
        f"*Status Server 1!*\n"
        f"CPU: *{cpu_percent}%*\n"
        f"Internet: Download *{download_speed:.2f} Mbps*, Upload *{upload_speed:.2f} Mbps*\n"
        f"Memory: *{memory_used}%*\n"
        f"Disk: *{disk_free}%* tr·ªëng / *{disk_used}%* ƒë√£ d√πng\n"
        f"Server status: {server_status}",
        parse_mode="Markdown"
    )

if __name__ == "__main__":
    # S·ª≠ d·ª•ng token b·∫°n cung c·∫•p
    TOKEN = "7905621710:AAEGFz44YBSzkUevXKDoEM73VLJl12ilnes"

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("sms", sms))
    app.add_handler(CommandHandler("spam", spam))
    app.add_handler(CommandHandler("server", server))

    print("Bot ƒë√£ s·∫µn s√†ng!")
    app.run_polling()